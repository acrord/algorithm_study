#include<iostream>
using namespace std;

int n, num, tt;
char op[2];
//정, 후, 좌, 우, 상, 하//
int cube[6][3][3], initial[6][3][3] = {
                        {{'r','r','r'},{'r','r','r'},{'r','r','r'}}, 
                        {{'o','o','o'},{'o','o','o'},{'o','o','o'}}, 
                        {{'g','g','g'},{'g','g','g'},{'g','g','g'}}, 
                        {{'b','b','b'},{'b','b','b'},{'b','b','b'}},
                        {{'w','w','w'},{'w','w','w'},{'w','w','w'}}, 
                        {{'y','y','y'},{'y','y','y'},{'y','y','y'}}};
//F, B // L, R // U, D //
int dir[6][4] = {{4, 5, 2, 3}, {5, 4, 2, 3}, {4, 5, 1, 0}, {4, 5, 0, 1}, {1, 0, 2, 3}, {0, 1, 2, 3}};
int t[6][4][3][2] = {
                    //F,B,L,R,U,D 기준 상 하 좌 우
                    {{{2, 0}, {2, 1}, {2, 2}}, {{0, 2}, {0, 1}, {0, 0}}, {{2, 2}, {1, 2}, {0, 2}}, {{0, 0}, {1, 0}, {2, 0}}},
                    {{{2, 0}, {2, 1}, {2, 2}}, {{0, 2}, {0, 1}, {0, 0}}, {{0, 0}, {1, 0}, {2, 0}}, {{2, 2}, {1, 2}, {0, 2}}},
                    {{{0, 0}, {1, 0}, {2, 0}}, {{0, 0}, {1, 0}, {2, 0}}, {{0, 0}, {1, 0}, {2, 0}}, {{0, 0}, {1, 0}, {2, 0}}},
                    {{{2, 2}, {1, 2}, {0, 2}}, {{2, 2}, {1, 2}, {0, 2}}, {{2, 2}, {1, 2}, {0, 2}}, {{2, 2}, {1, 2}, {0, 2}}},
                    {{{2, 0}, {2, 1}, {2, 2}}, {{0, 2}, {0, 1}, {0, 0}}, {{0, 2}, {0, 1}, {0, 0}}, {{0, 2}, {0, 1}, {0, 0}}},
                    {{{2, 0}, {2, 1}, {2, 2}}, {{0, 2}, {0, 1}, {0, 0}}, {{2, 0}, {2, 1}, {2, 2}}, {{2, 0}, {2, 1}, {2, 2}}}
                };
int rot[4], t0[4][3][2], t1, t2, t3, t4, t5, t6;

void print_cube(int index){
    for(int i = 0; i<3; i++){
        for(int j = 0; j<3; j++)
            printf("%c", cube[index][i][j]);
        printf("\n");
    }
}
//k, h left or right
void change(int k, int h){
    //상에 좌 저장
    cube[rot[0]][t0[0][0][0]][t0[0][0][1]] = cube[rot[k]][t0[k][0][0]][t0[k][0][1]]; 
    cube[rot[0]][t0[0][1][0]][t0[0][1][1]] = cube[rot[k]][t0[k][1][0]][t0[k][1][1]];
    cube[rot[0]][t0[0][2][0]][t0[0][2][1]] = cube[rot[k]][t0[k][2][0]][t0[k][2][1]];
    //좌에 하 저장
    cube[rot[k]][t0[k][0][0]][t0[k][0][1]] = cube[rot[1]][t0[1][0][0]][t0[1][0][1]];
    cube[rot[k]][t0[k][1][0]][t0[k][1][1]] = cube[rot[1]][t0[1][1][0]][t0[1][1][1]];
    cube[rot[k]][t0[k][2][0]][t0[k][2][1]] = cube[rot[1]][t0[1][2][0]][t0[1][2][1]];
    //하에 우 저장
    cube[rot[1]][t0[1][0][0]][t0[1][0][1]] = cube[rot[h]][t0[h][0][0]][t0[h][0][1]];
    cube[rot[1]][t0[1][1][0]][t0[1][1][1]] = cube[rot[h]][t0[h][1][0]][t0[h][1][1]];
    cube[rot[1]][t0[1][2][0]][t0[1][2][1]] = cube[rot[h]][t0[h][2][0]][t0[h][2][1]];
    //우에 상 저장
    cube[rot[h]][t0[h][0][0]][t0[h][0][1]] = t1, cube[rot[h]][t0[h][1][0]][t0[h][1][1]] = t2, cube[rot[h]][t0[h][2][0]][t0[h][2][1]] = t3;
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n;
    while(n--){
        copy(&initial[0][0][0], &initial[0][0][0] + 6*3*3, &cube[0][0][0]);
        cin >> num;
        while(num--){
            cin >> op;
            switch(op[0]){
                case 'F' : 
                copy(&dir[0][0], &dir[0][0] + 4, &rot[0]);
                copy(&t[0][0][0][0], &t[0][0][0][0] + 24, &t0[0][0][0]);
                tt = 0;
                break;
                case 'B' : 
                copy(&dir[1][0], &dir[1][0] + 4, &rot[0]);
                copy(&t[1][0][0][0], &t[1][0][0][0] + 24, &t0[0][0][0]);
                tt = 1;
                break;
                case 'L' : 
                copy(&dir[2][0], &dir[2][0] + 4, &rot[0]);
                copy(&t[2][0][0][0], &t[2][0][0][0] + 24, &t0[0][0][0]);
                tt = 2;
                break;
                case 'R' : 
                copy(&dir[3][0], &dir[3][0] + 4, &rot[0]);
                copy(&t[3][0][0][0], &t[3][0][0][0] + 24, &t0[0][0][0]);
                tt = 3;
                break;
                case 'U' : 
                copy(&dir[4][0], &dir[4][0] + 4, &rot[0]);
                copy(&t[4][0][0][0], &t[4][0][0][0] + 24, &t0[0][0][0]);
                tt = 4;
                break;
                case 'D' : 
                copy(&dir[5][0], &dir[5][0] + 4, &rot[0]);
                copy(&t[5][0][0][0], &t[5][0][0][0] + 24, &t0[0][0][0]);
                tt = 5;
                break;
            }
            //상 저장
            t1 = cube[rot[0]][t0[0][0][0]][t0[0][0][1]], t2 = cube[rot[0]][t0[0][1][0]][t0[0][1][1]], t3 = cube[rot[0]][t0[0][2][0]][t0[0][2][1]];
            t4 = cube[tt][0][0], t5 = cube[tt][0][1], t6 = cube[tt][0][2];
            //0  1  2  3
            //상 하 좌 우 
            if(op[1] == '+'){
                change(2, 3);
                //self
                cube[tt][0][0] = cube[tt][2][0], cube[tt][0][1] = cube[tt][1][0];
                cube[tt][2][0] = cube[tt][2][2], cube[tt][1][0] = cube[tt][2][1];
                cube[tt][2][1] = cube[tt][1][2], cube[tt][2][2] = t6;
                cube[tt][1][2] = t5, cube[tt][0][2] = t4;
            } else{
                change(3, 2);
                cube[tt][0][1] = cube[tt][1][2], cube[tt][0][2] = cube[tt][2][2];
                cube[tt][1][2] = cube[tt][2][1], cube[tt][2][2] = cube[tt][2][0];
                cube[tt][2][1] = cube[tt][1][0], cube[tt][2][0] = t4;
                cube[tt][0][0] = t6, cube[tt][1][0] = t5;
            }
        }
        print_cube(4);
    }
}